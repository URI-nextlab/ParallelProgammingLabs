-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mvm_sa is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    x_stream_TVALID : IN STD_LOGIC;
    x_stream_TREADY : OUT STD_LOGIC;
    x_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    x_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    x_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    y_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_stream_TVALID : OUT STD_LOGIC;
    y_stream_TREADY : IN STD_LOGIC;
    y_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mvm_sa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mvm_sa_mvm_sa,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.923000,HLS_SYN_LAT=7,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=69,HLS_SYN_LUT=184,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal x_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal y_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_1_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal last_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal regslice_both_y_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal shl_ln34_1_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln34_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_x_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal x_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal x_stream_TVALID_int_regslice : STD_LOGIC;
    signal x_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_x_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal x_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_x_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal x_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_x_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal x_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal y_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal y_stream_TVALID_int_regslice : STD_LOGIC;
    signal y_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_y_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal y_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_y_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mvm_sa_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_x_stream_V_data_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_stream_TDATA,
        vld_in => x_stream_TVALID,
        ack_in => regslice_both_x_stream_V_data_V_U_ack_in,
        data_out => x_stream_TDATA_int_regslice,
        vld_out => x_stream_TVALID_int_regslice,
        ack_out => x_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_x_stream_V_data_V_U_apdone_blk);

    regslice_both_x_stream_V_keep_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_stream_TKEEP,
        vld_in => x_stream_TVALID,
        ack_in => regslice_both_x_stream_V_keep_V_U_ack_in,
        data_out => x_stream_TKEEP_int_regslice,
        vld_out => regslice_both_x_stream_V_keep_V_U_vld_out,
        ack_out => x_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_x_stream_V_keep_V_U_apdone_blk);

    regslice_both_x_stream_V_strb_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_stream_TSTRB,
        vld_in => x_stream_TVALID,
        ack_in => regslice_both_x_stream_V_strb_V_U_ack_in,
        data_out => x_stream_TSTRB_int_regslice,
        vld_out => regslice_both_x_stream_V_strb_V_U_vld_out,
        ack_out => x_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_x_stream_V_strb_V_U_apdone_blk);

    regslice_both_x_stream_V_last_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_stream_TLAST,
        vld_in => x_stream_TVALID,
        ack_in => regslice_both_x_stream_V_last_V_U_ack_in,
        data_out => x_stream_TLAST_int_regslice,
        vld_out => regslice_both_x_stream_V_last_V_U_vld_out,
        ack_out => x_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_x_stream_V_last_V_U_apdone_blk);

    regslice_both_y_stream_V_data_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => y_stream_TDATA_int_regslice,
        vld_in => y_stream_TVALID_int_regslice,
        ack_in => y_stream_TREADY_int_regslice,
        data_out => y_stream_TDATA,
        vld_out => regslice_both_y_stream_V_data_V_U_vld_out,
        ack_out => y_stream_TREADY,
        apdone_blk => regslice_both_y_stream_V_data_V_U_apdone_blk);

    regslice_both_y_stream_V_keep_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => y_stream_TVALID_int_regslice,
        ack_in => regslice_both_y_stream_V_keep_V_U_ack_in_dummy,
        data_out => y_stream_TKEEP,
        vld_out => regslice_both_y_stream_V_keep_V_U_vld_out,
        ack_out => y_stream_TREADY,
        apdone_blk => regslice_both_y_stream_V_keep_V_U_apdone_blk);

    regslice_both_y_stream_V_strb_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => y_stream_TVALID_int_regslice,
        ack_in => regslice_both_y_stream_V_strb_V_U_ack_in_dummy,
        data_out => y_stream_TSTRB,
        vld_out => regslice_both_y_stream_V_strb_V_U_vld_out,
        ack_out => y_stream_TREADY,
        apdone_blk => regslice_both_y_stream_V_strb_V_U_apdone_blk);

    regslice_both_y_stream_V_last_V_U : component mvm_sa_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => y_stream_TLAST_int_regslice,
        vld_in => y_stream_TVALID_int_regslice,
        ack_in => regslice_both_y_stream_V_last_V_U_ack_in_dummy,
        data_out => y_stream_TLAST,
        vld_out => regslice_both_y_stream_V_last_V_U_vld_out,
        ack_out => y_stream_TREADY,
        apdone_blk => regslice_both_y_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_1_reg_127 <= x_stream_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_reg_122 <= x_stream_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln34_fu_110_p2 <= std_logic_vector(unsigned(shl_ln34_fu_93_p2) + unsigned(sub_ln34_fu_104_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (y_stream_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (x_stream_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter1, regslice_both_y_stream_V_data_V_U_apdone_blk, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage3_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (x_stream_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, regslice_both_y_stream_V_data_V_U_apdone_blk, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (x_stream_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, regslice_both_y_stream_V_data_V_U_apdone_blk, x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_stream_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (x_stream_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(x_stream_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (x_stream_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(x_stream_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (x_stream_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(x_stream_TVALID_int_regslice)
    begin
                ap_block_state3_pp0_stage2_iter0 <= (x_stream_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(x_stream_TVALID_int_regslice, y_stream_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (x_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(y_stream_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (y_stream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage1_iter1_assign_proc : process(y_stream_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage1_iter1 <= (y_stream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state7_pp0_stage2_iter1_assign_proc : process(y_stream_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage2_iter1 <= (y_stream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state8_pp0_stage3_iter1_assign_proc : process(regslice_both_y_stream_V_data_V_U_apdone_blk, y_stream_TREADY_int_regslice)
    begin
                ap_block_state8_pp0_stage3_iter1 <= ((y_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_stream_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    last_fu_116_p2 <= std_logic_vector(unsigned(add_ln34_fu_110_p2) + unsigned(tmp_reg_122));
    shl_ln34_1_fu_98_p2 <= std_logic_vector(shift_left(unsigned(x_stream_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln34_fu_93_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_reg_127),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    sub_ln34_fu_104_p2 <= std_logic_vector(unsigned(shl_ln34_1_fu_98_p2) - unsigned(x_stream_TDATA_int_regslice));

    x_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, x_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            x_stream_TDATA_blk_n <= x_stream_TVALID_int_regslice;
        else 
            x_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_stream_TREADY <= regslice_both_x_stream_V_data_V_U_ack_in;

    x_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            x_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            x_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    y_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1, y_stream_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            y_stream_TDATA_blk_n <= y_stream_TREADY_int_regslice;
        else 
            y_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_stream_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, last_fu_116_p2, ap_block_pp0_stage3_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)))) then 
            y_stream_TDATA_int_regslice <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            y_stream_TDATA_int_regslice <= last_fu_116_p2;
        else 
            y_stream_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_stream_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001))) then 
            y_stream_TLAST_int_regslice <= ap_const_lv1_1;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            y_stream_TLAST_int_regslice <= ap_const_lv1_0;
        else 
            y_stream_TLAST_int_regslice <= "X";
        end if; 
    end process;

    y_stream_TVALID <= regslice_both_y_stream_V_data_V_U_vld_out;

    y_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            y_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            y_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
