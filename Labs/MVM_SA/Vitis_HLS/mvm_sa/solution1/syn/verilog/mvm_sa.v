// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mvm_sa_mvm_sa,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.923000,HLS_SYN_LAT=7,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=69,HLS_SYN_LUT=184,HLS_VERSION=2021_2}" *)

module mvm_sa (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst_n,
        x_stream_TDATA,
        x_stream_TVALID,
        x_stream_TREADY,
        x_stream_TKEEP,
        x_stream_TSTRB,
        x_stream_TLAST,
        y_stream_TDATA,
        y_stream_TVALID,
        y_stream_TREADY,
        y_stream_TKEEP,
        y_stream_TSTRB,
        y_stream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst_n;
input  [31:0] x_stream_TDATA;
input   x_stream_TVALID;
output   x_stream_TREADY;
input  [3:0] x_stream_TKEEP;
input  [3:0] x_stream_TSTRB;
input  [0:0] x_stream_TLAST;
output  [31:0] y_stream_TDATA;
output   y_stream_TVALID;
input   y_stream_TREADY;
output  [3:0] y_stream_TKEEP;
output  [3:0] y_stream_TSTRB;
output  [0:0] y_stream_TLAST;

 reg    ap_rst_n_inv;
reg    x_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    y_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] tmp_reg_122;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_1_reg_127;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state7_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] last_fu_116_p2;
reg    ap_block_state4_pp0_stage3_iter0;
wire    regslice_both_y_stream_V_data_V_U_apdone_blk;
reg    ap_block_state8_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
wire   [31:0] shl_ln34_1_fu_98_p2;
wire   [31:0] shl_ln34_fu_93_p2;
wire   [31:0] sub_ln34_fu_104_p2;
wire   [31:0] add_ln34_fu_110_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_x_stream_V_data_V_U_apdone_blk;
wire   [31:0] x_stream_TDATA_int_regslice;
wire    x_stream_TVALID_int_regslice;
reg    x_stream_TREADY_int_regslice;
wire    regslice_both_x_stream_V_data_V_U_ack_in;
wire    regslice_both_x_stream_V_keep_V_U_apdone_blk;
wire   [3:0] x_stream_TKEEP_int_regslice;
wire    regslice_both_x_stream_V_keep_V_U_vld_out;
wire    regslice_both_x_stream_V_keep_V_U_ack_in;
wire    regslice_both_x_stream_V_strb_V_U_apdone_blk;
wire   [3:0] x_stream_TSTRB_int_regslice;
wire    regslice_both_x_stream_V_strb_V_U_vld_out;
wire    regslice_both_x_stream_V_strb_V_U_ack_in;
wire    regslice_both_x_stream_V_last_V_U_apdone_blk;
wire   [0:0] x_stream_TLAST_int_regslice;
wire    regslice_both_x_stream_V_last_V_U_vld_out;
wire    regslice_both_x_stream_V_last_V_U_ack_in;
reg   [31:0] y_stream_TDATA_int_regslice;
reg    y_stream_TVALID_int_regslice;
wire    y_stream_TREADY_int_regslice;
wire    regslice_both_y_stream_V_data_V_U_vld_out;
wire    regslice_both_y_stream_V_keep_V_U_apdone_blk;
wire    regslice_both_y_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_y_stream_V_keep_V_U_vld_out;
wire    regslice_both_y_stream_V_strb_V_U_apdone_blk;
wire    regslice_both_y_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_y_stream_V_strb_V_U_vld_out;
wire    regslice_both_y_stream_V_last_V_U_apdone_blk;
reg   [0:0] y_stream_TLAST_int_regslice;
wire    regslice_both_y_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_y_stream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

mvm_sa_regslice_both #(
    .DataWidth( 32 ))
regslice_both_x_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_stream_TDATA),
    .vld_in(x_stream_TVALID),
    .ack_in(regslice_both_x_stream_V_data_V_U_ack_in),
    .data_out(x_stream_TDATA_int_regslice),
    .vld_out(x_stream_TVALID_int_regslice),
    .ack_out(x_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_stream_V_data_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 4 ))
regslice_both_x_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_stream_TKEEP),
    .vld_in(x_stream_TVALID),
    .ack_in(regslice_both_x_stream_V_keep_V_U_ack_in),
    .data_out(x_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_x_stream_V_keep_V_U_vld_out),
    .ack_out(x_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_stream_V_keep_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 4 ))
regslice_both_x_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_stream_TSTRB),
    .vld_in(x_stream_TVALID),
    .ack_in(regslice_both_x_stream_V_strb_V_U_ack_in),
    .data_out(x_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_x_stream_V_strb_V_U_vld_out),
    .ack_out(x_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_stream_V_strb_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 1 ))
regslice_both_x_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_stream_TLAST),
    .vld_in(x_stream_TVALID),
    .ack_in(regslice_both_x_stream_V_last_V_U_ack_in),
    .data_out(x_stream_TLAST_int_regslice),
    .vld_out(regslice_both_x_stream_V_last_V_U_vld_out),
    .ack_out(x_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_stream_V_last_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 32 ))
regslice_both_y_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(y_stream_TDATA_int_regslice),
    .vld_in(y_stream_TVALID_int_regslice),
    .ack_in(y_stream_TREADY_int_regslice),
    .data_out(y_stream_TDATA),
    .vld_out(regslice_both_y_stream_V_data_V_U_vld_out),
    .ack_out(y_stream_TREADY),
    .apdone_blk(regslice_both_y_stream_V_data_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 4 ))
regslice_both_y_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd15),
    .vld_in(y_stream_TVALID_int_regslice),
    .ack_in(regslice_both_y_stream_V_keep_V_U_ack_in_dummy),
    .data_out(y_stream_TKEEP),
    .vld_out(regslice_both_y_stream_V_keep_V_U_vld_out),
    .ack_out(y_stream_TREADY),
    .apdone_blk(regslice_both_y_stream_V_keep_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 4 ))
regslice_both_y_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(y_stream_TVALID_int_regslice),
    .ack_in(regslice_both_y_stream_V_strb_V_U_ack_in_dummy),
    .data_out(y_stream_TSTRB),
    .vld_out(regslice_both_y_stream_V_strb_V_U_vld_out),
    .ack_out(y_stream_TREADY),
    .apdone_blk(regslice_both_y_stream_V_strb_V_U_apdone_blk)
);

mvm_sa_regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(y_stream_TLAST_int_regslice),
    .vld_in(y_stream_TVALID_int_regslice),
    .ack_in(regslice_both_y_stream_V_last_V_U_ack_in_dummy),
    .data_out(y_stream_TLAST),
    .vld_out(regslice_both_y_stream_V_last_V_U_vld_out),
    .ack_out(y_stream_TREADY),
    .apdone_blk(regslice_both_y_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == 1'b1))) begin
        tmp_1_reg_127 <= x_stream_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == 1'b1))) begin
        tmp_reg_122 <= x_stream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1)))) begin
        x_stream_TDATA_blk_n = x_stream_TVALID_int_regslice;
    end else begin
        x_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1)))) begin
        x_stream_TREADY_int_regslice = 1'b1;
    end else begin
        x_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == 1'b1)))) begin
        y_stream_TDATA_blk_n = y_stream_TREADY_int_regslice;
    end else begin
        y_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
        y_stream_TDATA_int_regslice = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1))) begin
        y_stream_TDATA_int_regslice = last_fu_116_p2;
    end else begin
        y_stream_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        y_stream_TLAST_int_regslice = 1'd1;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == 1'b1)))) begin
        y_stream_TLAST_int_regslice = 1'd0;
    end else begin
        y_stream_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == 1'b1)))) begin
        y_stream_TVALID_int_regslice = 1'b1;
    end else begin
        y_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((((1'b0 == ap_block_pp0_stage3_subdone) & (ap_reset_idle_pp0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_110_p2 = (shl_ln34_fu_93_p2 + sub_ln34_fu_104_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (y_stream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (x_stream_TVALID_int_regslice == 1'b0)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((y_stream_TREADY_int_regslice == 1'b0) | (regslice_both_y_stream_V_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & ((y_stream_TREADY_int_regslice == 1'b0) | (x_stream_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((y_stream_TREADY_int_regslice == 1'b0) | (regslice_both_y_stream_V_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & ((y_stream_TREADY_int_regslice == 1'b0) | (x_stream_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((y_stream_TREADY_int_regslice == 1'b0) | (regslice_both_y_stream_V_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & ((y_stream_TREADY_int_regslice == 1'b0) | (x_stream_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (x_stream_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (x_stream_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (x_stream_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((y_stream_TREADY_int_regslice == 1'b0) | (x_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (y_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = (y_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage2_iter1 = (y_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage3_iter1 = ((y_stream_TREADY_int_regslice == 1'b0) | (regslice_both_y_stream_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign last_fu_116_p2 = (add_ln34_fu_110_p2 + tmp_reg_122);

assign shl_ln34_1_fu_98_p2 = x_stream_TDATA_int_regslice << 32'd2;

assign shl_ln34_fu_93_p2 = tmp_1_reg_127 << 32'd1;

assign sub_ln34_fu_104_p2 = (shl_ln34_1_fu_98_p2 - x_stream_TDATA_int_regslice);

assign x_stream_TREADY = regslice_both_x_stream_V_data_V_U_ack_in;

assign y_stream_TVALID = regslice_both_y_stream_V_data_V_U_vld_out;

endmodule //mvm_sa
